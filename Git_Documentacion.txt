//Nos permite saber la version de git que manejamos
git --version

//Ingresar a un folder
cd "direccion"

//Establecer el nombre de la persona que trabajara con git en el equipo
git config --global user.name "Jean Pierr"

//Establecer el email de la persona que trabaja con git en el equipo
git config --global user.email "jeanpierr-28@hotmail.com"

//Saber la informacion de la persona que trabaja con git en el equipo
git config --global -l

//Nos permite inicializar el archivo , es decir crear el archivo git 
git init 

//Nos permite visualizar los cambios
git log --oneline --decorate --all --graph

//Nos permite visualizar el status de nuestros archivos
git status

//Nos permite agregar un archivo al stating area
git add .

//Nos permite enviar al los archivos al repositorio local
git commit -m "Primer commit"

//Nos permite visualizar la diferencia entre los archivos del stating area y working 
git diff

//Nos permite recuperar los archivos del repositorio local
git checkout

//Nos permite enviar el archivo del repositorio local al remoto
git pull

//Nos permite copiar el archivo del repositorio remoto al local 
git push

//Nos permite visualizar el historial de commit que se ha realizado
git log

//Nos permite agregar un unico archivo al stage area
git add "pagina.html"

//Enviar al stage area segun el formato del archivo (Html en este caso)
git add Carpeta/*.html

//Agregar todos los archivos al stage area
git add --all

//Eliminar archivos del stage area
git reset "archivo"

//Agregar un alias a los comandos (En este caso nombramos "l" como alias de "log")
git config --global alias.l "log"

//Cambiar el mensaje asociado a un commit
git commit --amend -m "Nueva modificacion"

//Cambiar el nombre de un archivo
git mv "nombre.html" "Nuevo.html"

//Remover un archivo del workspace
git rm "nombre.html"

//Transladarse a un commit especifico
git reset --hard "Id commit"

//Visualizar el historico de cambios realizados
git reflog

//Ir a otra rama
git checkout Nombre_rama

//Eliminar otra rama (Se elimina Nombre_Rama)
git branch -d Nombre_rama

//Agregar una rama a otra(La rama actual traera los datos de Nombre_Rama)
git merge Nombre_Rama

//Crear una nueva rama y dirigirse a ella}
git checkout  -b Nueva_Rama

//Uso de etiquetas
git tag Nombre_Version

//Nombre del tag
git tag

//Borrar el nombre del tag
git tag -d Nombre_Version

//Nombrar un tag y describirlo
git tag -a v1.0.0 -m "Version inicial"

//Mostrar los commits relacionados a un tag
git show v1.0.0

//Indicar que un commit pertenece a una version en especifico
git tag -a v0.0.1 5345dgdsg -m "Version beta"

//Clonar un repositorio
git clone "link"

//Enviar los cambios a la rama de origen master
git push origin master

//Recuperar los archivos remotos
git pull